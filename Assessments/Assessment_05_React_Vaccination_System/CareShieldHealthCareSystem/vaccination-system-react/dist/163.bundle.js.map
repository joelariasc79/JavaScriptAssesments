{"version":3,"file":"163.bundle.js","mappings":"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","sources":["webpack://vaccination-system-react/./src/utils/qrCodeGenerator.js","webpack://vaccination-system-react/./src/pages/Patient/PatientVaccinationOrders/PatientVaccinationOrdersPage.css?f1ce","webpack://vaccination-system-react/./src/pages/Patient/PatientVaccinationOrders/PatientVaccinationOrdersPage.js","webpack://vaccination-system-react/./src/pages/Patient/PatientVaccinationOrders/PatientVaccinationOrdersPage.css","webpack://vaccination-system-react/./src/store/features/vaccinationOrder/vaccinationOrderSelectors.js"],"sourcesContent":["// src/utils/qrCodeGenerator.js\nimport QRCode from 'qrcode'; // Import the qrcode library\n\nexport const generateQRCodeImage = async (dataString, size = 128) => {\n    try {\n        // Generate QR code as a data URL (PNG format)\n        const dataUrl = await QRCode.toDataURL(dataString, {\n            errorCorrectionLevel: 'H', // High error correction\n            width: size,              // Width of the QR code in pixels\n            margin: 1                 // Minimal margin\n        });\n        console.log(`Generated QR code data URL for: ${dataString}`);\n        return dataUrl;\n    } catch (err) {\n        console.error('Error generating QR code:', err);\n        // Fallback to a placeholder or an empty string on error\n        return `https://placehold.co/${size}x${size}/FF0000/FFFFFF?text=QR+Error`;\n    }\n};\n\n// src/utils/qrCodeGenerator.js\n// Example using a hypothetical QR code library\n// You would install a library like 'qrcode.react' for React components\n// or 'qrcode' for pure JS generation.\n\n// This is a conceptual example. Actual implementation depends on the chosen library.\n// export const generateQRCodeImage = (dataString, size = 128) => {\n//     // If using qrcode.react, you'd render <QRCode value={dataString} size={size} /> in a component\n//     // If using a pure JS library, it might return a data URL or draw on a canvas.\n//     console.log(`Generating QR code for: ${dataString} with size ${size}`);\n//     // Return a placeholder or actual QR code data URL/component\n//     return `https://placehold.co/${size}x${size}/000000/FFFFFF?text=QR+Code`;\n// };\n\n\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./PatientVaccinationOrdersPage.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./PatientVaccinationOrdersPage.css\";\n       export default content && content.locals ? content.locals : undefined;\n","// src/pages/Patient/PatientVaccinationOrdersPage/PatientVaccinationOrdersPage.js (Updated)\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchPatientVaccinationOrders,\n    markOrderAsPaid,\n    scheduleAppointment,\n    markOrderAsVaccinated,\n    cancelOrderByPatient,\n    clearFetchPatientOrdersStatus,\n    clearMarkPaidStatus,\n    clearScheduleAppointmentStatus,\n    clearMarkVaccinatedStatus,\n    clearCancelOrderStatus,\n} from '../../../store/features/vaccinationOrder/vaccinationOrderSlice';\nimport {\n    selectPatientOrders,\n    selectFetchPatientOrdersStatus,\n    selectFetchPatientOrdersError,\n    selectMarkPaidStatus,\n    selectMarkPaidError,\n    selectScheduleAppointmentStatus,\n    selectScheduleAppointmentError,\n    selectMarkVaccinatedStatus,\n    selectMarkVaccinatedError,\n    selectCancelOrderStatus,\n    selectCancelOrderError,\n} from '../../../store/features/vaccinationOrder/vaccinationOrderSelectors';\nimport { selectCurrentUser } from '../../../store/features/auth/authSelectors';\n\nimport Modal from '../../../components/common/Modal/Modal';\nimport Button from '../../../components/common/Button/Button';\nimport Input from '../../../components/common/Input/Input';\nimport { generateQRCodeImage } from '../../../utils/qrCodeGenerator'; // Import the QR code utility\n\nimport './PatientVaccinationOrdersPage.css';\n\nconst PatientVaccinationOrdersPage = () => {\n    const dispatch = useDispatch();\n    const currentUser = useSelector(selectCurrentUser);\n    const orders = useSelector(selectPatientOrders);\n    const fetchStatus = useSelector(selectFetchPatientOrdersStatus);\n    const fetchError = useSelector(selectFetchPatientOrdersError);\n\n    const markPaidStatus = useSelector(selectMarkPaidStatus);\n    const markPaidError = useSelector(selectMarkPaidError);\n    const scheduleStatus = useSelector(selectScheduleAppointmentStatus);\n    const scheduleError = useSelector(selectScheduleAppointmentError);\n    const markVaccinatedStatus = useSelector(selectMarkVaccinatedStatus);\n    const markVaccinatedError = useSelector(selectMarkVaccinatedError);\n    const cancelStatus = useSelector(selectCancelOrderStatus);\n    const cancelError = useSelector(selectCancelOrderError);\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [modalContent, setModalContent] = useState({ title: '', message: '' });\n    const [selectedOrderIdForScheduling, setSelectedOrderIdForScheduling] = useState(null);\n    const [appointmentDate, setAppointmentDate] = useState('');\n    const [selectedOrderForPayment, setSelectedOrderForPayment] = useState(null);\n    const [qrCodeDataUrl, setQrCodeDataUrl] = useState('');\n\n    const patientId = currentUser?._id;\n\n    // Fetch orders on component mount\n    useEffect(() => {\n        if (patientId) {\n            dispatch(fetchPatientVaccinationOrders());\n        }\n        return () => {\n            dispatch(clearFetchPatientOrdersStatus());\n            dispatch(clearMarkPaidStatus());\n            dispatch(clearScheduleAppointmentStatus());\n            dispatch(clearMarkVaccinatedStatus());\n            dispatch(clearCancelOrderStatus());\n        };\n    }, [dispatch, patientId]);\n\n    // Handle success/failure of actions\n    useEffect(() => {\n        if (markPaidStatus === 'succeeded') {\n            setModalContent({ title: 'Payment Confirmed!', message: 'Your payment has been successfully processed.' });\n            setIsModalOpen(true);\n            dispatch(clearMarkPaidStatus());\n            dispatch(fetchPatientVaccinationOrders()); // Re-fetch orders\n            setSelectedOrderForPayment(null); // Clear selected payment order\n            setQrCodeDataUrl(''); // Clear QR code URL\n        } else if (markPaidStatus === 'failed') {\n            setModalContent({ title: 'Payment Failed', message: markPaidError || 'Failed to process payment.' });\n            setIsModalOpen(true);\n            dispatch(clearMarkPaidStatus());\n            setSelectedOrderForPayment(null); // Clear selected payment order\n            setQrCodeDataUrl(''); // Clear QR code URL\n        }\n\n        if (scheduleStatus === 'succeeded') {\n            setModalContent({ title: 'Appointment Scheduled!', message: 'Your vaccination appointment has been successfully scheduled.' });\n            setIsModalOpen(true);\n            setAppointmentDate('');\n            setSelectedOrderIdForScheduling(null);\n            dispatch(clearScheduleAppointmentStatus());\n            dispatch(fetchPatientVaccinationOrders());\n        } else if (scheduleStatus === 'failed') {\n            setModalContent({ title: 'Scheduling Failed', message: scheduleError || 'Failed to schedule appointment.' });\n            setIsModalOpen(true);\n            dispatch(clearScheduleAppointmentStatus());\n        }\n\n        if (markVaccinatedStatus === 'succeeded') {\n            setModalContent({ title: 'Vaccination Confirmed!', message: 'Your vaccination has been successfully recorded.' });\n            setIsModalOpen(true);\n            dispatch(clearMarkVaccinatedStatus());\n            dispatch(fetchPatientVaccinationOrders());\n        } else if (markVaccinatedStatus === 'failed') {\n            setModalContent({ title: 'Vaccination Confirmation Failed', message: markVaccinatedError || 'Failed to confirm vaccination.' });\n            setIsModalOpen(true);\n            dispatch(clearMarkVaccinatedStatus());\n        }\n\n        if (cancelStatus === 'succeeded') {\n            setModalContent({ title: 'Order Cancelled!', message: 'Your vaccination order has been successfully cancelled.' });\n            setIsModalOpen(true);\n            dispatch(clearCancelOrderStatus());\n            dispatch(fetchPatientVaccinationOrders());\n        } else if (cancelStatus === 'failed') {\n            setModalContent({ title: 'Order Cancellation Failed', message: cancelError || 'Failed to cancel order.' });\n            setIsModalOpen(true);\n            dispatch(clearCancelOrderStatus());\n        }\n    }, [\n        markPaidStatus, markPaidError, scheduleStatus, scheduleError,\n        markVaccinatedStatus, markVaccinatedError, cancelStatus, cancelError,\n        dispatch\n    ]);\n\n    // Modified handlePay to open QR modal with loading state and URL\n    const handlePay = async (order) => {\n        setSelectedOrderForPayment(order);\n        setIsModalOpen(true); // Open modal first\n\n        // Set a loading message initially\n        setModalContent({\n            title: 'Scan to Pay',\n            message: <div className=\"loading-qr\">Generating QR Code...</div>\n        });\n\n        // Construct the URL for the payment simulation page\n        const paymentPageUrl = `${window.location.origin}/pay-qr-simulate?orderId=${order._id}&amount=${order.charge_to_be_paid}`;\n\n        try {\n            const url = await generateQRCodeImage(paymentPageUrl, 200); // Generate QR for the URL\n            setQrCodeDataUrl(url); // Store URL in state\n            setModalContent({\n                title: 'Scan to Pay',\n                message: (\n                    <div className=\"qr-payment-modal-content\">\n                        <p>Please scan the QR code below to complete your payment of <strong>${order.charge_to_be_paid.toFixed(2)}</strong> for order #...{order._id.substring(order._id.length - 6)}.</p>\n                        <p className=\"qr-instruction\">\n                            (This QR code leads to a simulated payment page. After scanning, return here and click \"Confirm Payment\".)\n                        </p>\n                        <img\n                            src={url} // Use the directly generated URL here\n                            alt=\"Payment QR Code\"\n                            className=\"payment-qr-code\"\n                        />\n                    </div>\n                )\n            });\n        } catch (error) {\n            console.error(\"Failed to generate QR code:\", error);\n            setModalContent({\n                title: 'Error',\n                message: 'Failed to generate QR code. Please try again.'\n            });\n            setQrCodeDataUrl(''); // Clear on error\n        }\n    };\n\n    // Function to confirm payment after QR scan (simulated)\n    const handleConfirmPayment = () => {\n        if (selectedOrderForPayment) {\n            if (window.confirm('Are you sure you want to confirm this payment?')) {\n                dispatch(markOrderAsPaid(selectedOrderForPayment._id));\n            }\n        }\n    };\n\n    const handleScheduleAppointmentClick = (orderId) => {\n        setSelectedOrderIdForScheduling(orderId);\n        setAppointmentDate('');\n        setIsModalOpen(true);\n        setModalContent({\n            title: 'Schedule Your Appointment',\n            message: (\n                <>\n                    <p>Please select a date for your vaccination appointment:</p>\n                    <Input\n                        label=\"Appointment Date\"\n                        id=\"appointmentDate\"\n                        type=\"date\"\n                        value={appointmentDate}\n                        onChange={(e) => setAppointmentDate(e.target.value)}\n                        min={new Date().toISOString().split('T')[0]}\n                        required\n                    />\n                </>\n            )\n        });\n    };\n\n    const handleConfirmSchedule = () => {\n        if (!appointmentDate) {\n            alert('Please select an appointment date.');\n            return;\n        }\n        if (new Date(appointmentDate).getTime() < Date.now()) {\n            alert('Appointment date cannot be in the past.');\n            return;\n        }\n        dispatch(scheduleAppointment({ orderId: selectedOrderIdForScheduling, appointmentDate }));\n    };\n\n    const handleMarkVaccinated = (orderId) => {\n        if (window.confirm('Are you sure you want to confirm this vaccination was received?')) {\n            dispatch(markOrderAsVaccinated({ orderId, vaccinationDate: new Date().toISOString() }));\n        }\n    };\n\n    const handleCancelOrder = (orderId) => {\n        if (window.confirm('Are you sure you want to cancel this vaccination order?')) {\n            dispatch(cancelOrderByPatient(orderId));\n        }\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setSelectedOrderIdForScheduling(null);\n        setAppointmentDate('');\n        setSelectedOrderForPayment(null); // Clear selected payment order\n        setQrCodeDataUrl(''); // Clear QR code URL\n    };\n\n    if (fetchStatus === 'loading') {\n        return <div className=\"loading\">Loading your approved orders...</div>;\n    }\n\n    if (fetchError) {\n        return <div className=\"error-message\">Error fetching orders: {fetchError}</div>;\n    }\n\n    if (!patientId) {\n        return <div className=\"info-message\">Please log in as a patient to view your orders.</div>;\n    }\n\n    return (\n        <div className=\"patient-approved-orders-container\">\n            <h2>My Approved Vaccination Orders</h2>\n\n            {orders.length === 0 ? (\n                <p>You have no approved vaccination orders at this time.</p>\n            ) : (\n                <div className=\"orders-grid\">\n                    {orders.map((order) => {\n                        const isPaid = order.paymentStatus === 'paid';\n                        const isScheduled = order.appointmentStatus === 'scheduled';\n                        const isPendingScheduling = order.appointmentStatus === 'pending_scheduling';\n                        const isVaccinated = order.vaccinationStatus === 'vaccinated';\n                        const isCancelled = order.vaccinationStatus === 'cancelled';\n                        const isPendingApproval = order.vaccinationStatus === 'pending_approval';\n\n                        const appointmentDateObj = order.appointment_date ? new Date(order.appointment_date) : null;\n                        const isAppointmentInFuture = appointmentDateObj && appointmentDateObj.getTime() > Date.now();\n                        const isAppointmentInPastOrToday = appointmentDateObj && appointmentDateObj.getTime() <= Date.now();\n                        return (\n                            <div key={order._id} className={`order-card ${isCancelled ? 'card-cancelled' : ''} ${isVaccinated ? 'card-vaccinated' : ''}`}>\n                                <h3>Order #{order._id.substring(order._id.length - 6)}</h3>\n                                <p><strong>Hospital:</strong> {order.hospitalId?.name || 'N/A'}</p>\n                                <p><strong>Vaccine:</strong> {order.vaccineId?.name || 'N/A'} ({order.vaccineId?.type || 'N/A'})</p>\n                                <p><strong>Dose:</strong> {order.dose_number}</p>\n                                <p><strong>Charge:</strong> ${order.charge_to_be_paid.toFixed(2)}</p>\n                                <p><strong>Payment Status:</strong> <span className={`status-${order.paymentStatus}`}>{order.paymentStatus.replace('_', ' ')}</span></p>\n                                <p><strong>Appointment Status:</strong> <span className={`status-${order.appointmentStatus}`}>{order.appointmentStatus.replace('_', ' ')}</span></p>\n                                <p><strong>Vaccination Status:</strong> <span className={`status-${order.vaccinationStatus}`}>{order.vaccinationStatus.replace('_', ' ')}</span></p>\n\n                                {order.appointment_date && (\n                                    <p><strong>Appointment Date:</strong> {new Date(order.appointment_date).toLocaleDateString()} at {new Date(order.appointment_date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>\n                                )}\n\n                                <div className=\"order-actions\">\n                                    {!isPendingApproval && !isPaid && !isCancelled && !isVaccinated && (\n                                        <Button\n                                            onClick={() => handlePay(order)}\n                                            disabled={markPaidStatus === 'loading'}\n                                            variant=\"primary\"\n                                        >\n                                            {markPaidStatus === 'loading' ? 'Processing...' : 'Pay Now'}\n                                        </Button>\n                                    )}\n\n                                    {!isPendingApproval && isPaid && isPendingScheduling && !isCancelled && !isVaccinated && (\n                                        <Button\n                                            onClick={() => handleScheduleAppointmentClick(order._id)}\n                                            disabled={scheduleStatus === 'loading'}\n                                            variant=\"secondary\"\n                                        >\n                                            {scheduleStatus === 'loading' ? 'Scheduling...' : 'Schedule Appointment'}\n                                        </Button>\n                                    )}\n\n                                    {!isPendingApproval && isPaid && isScheduled && isAppointmentInFuture && !isCancelled && !isVaccinated && (\n                                        <p className=\"appointment-info\">Appointment set for: {new Date(order.appointment_date).toLocaleDateString()}</p>\n                                    )}\n\n                                    {!isPendingApproval && isPaid && isScheduled && isAppointmentInPastOrToday && !isCancelled && !isVaccinated && (\n                                        <Button\n                                            onClick={() => handleMarkVaccinated(order._id)}\n                                            disabled={markVaccinatedStatus === 'loading'}\n                                            variant=\"success\"\n                                        >\n                                            {markVaccinatedStatus === 'loading' ? 'Confirming...' : 'Mark Vaccinated'}\n                                        </Button>\n                                    )}\n\n                                    {!isPendingApproval && !isCancelled && !isVaccinated && (\n                                        <Button\n                                            onClick={() => handleCancelOrder(order._id)}\n                                            disabled={cancelStatus === 'loading'}\n                                            variant=\"danger\"\n                                        >\n                                            {cancelStatus === 'loading' ? 'Cancelling...' : 'Cancel Order'}\n                                        </Button>\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            )}\n\n            <Modal\n                isOpen={isModalOpen}\n                onClose={closeModal}\n                title={modalContent.title}\n                footer={\n                    selectedOrderForPayment ?\n                        ( // If a payment order is selected, show confirm payment button\n                            <Button onClick={handleConfirmPayment} disabled={markPaidStatus === 'loading'}>\n                                {markPaidStatus === 'loading' ? 'Confirming...' : 'Confirm Payment'}\n                            </Button>\n                        ) : selectedOrderIdForScheduling ?\n                            ( // If scheduling an appointment\n                                <Button onClick={handleConfirmSchedule} disabled={scheduleStatus === 'loading'}>\n                                    {scheduleStatus === 'loading' ? 'Confirm Schedule' : 'Confirm Schedule'}\n                                </Button>\n                            ) : ( // Default close button\n                                <Button onClick={closeModal}>Close</Button>\n                            )\n                }\n            >\n                {modalContent.message}\n            </Modal>\n        </div>\n    );\n};\n\nexport default PatientVaccinationOrdersPage;\n\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import {\n//     fetchPatientVaccinationOrders,\n//     markOrderAsPaid,\n//     scheduleAppointment,\n//     markOrderAsVaccinated,\n//     cancelOrderByPatient,\n//     clearFetchPatientOrdersStatus,\n//     clearMarkPaidStatus,\n//     clearScheduleAppointmentStatus,\n//     clearMarkVaccinatedStatus,\n//     clearCancelOrderStatus,\n// } from '../../../store/features/vaccinationOrder/vaccinationOrderSlice';\n// import {\n//     selectPatientOrders,\n//     selectFetchPatientOrdersStatus,\n//     selectFetchPatientOrdersError,\n//     selectMarkPaidStatus,\n//     selectMarkPaidError,\n//     selectScheduleAppointmentStatus,\n//     selectScheduleAppointmentError,\n//     selectMarkVaccinatedStatus,\n//     selectMarkVaccinatedError,\n//     selectCancelOrderStatus,\n//     selectCancelOrderError,\n// } from '../../../store/features/vaccinationOrder/vaccinationOrderSelectors';\n// import { selectCurrentUser } from '../../../store/features/auth/authSelectors';\n//\n// import Modal from '../../../components/common/Modal/Modal';\n// import Button from '../../../components/common/Button/Button';\n// import Input from '../../../components/common/Input/Input';\n// import { generateQRCodeImage } from '../../../utils/qrCodeGenerator'; // Import the QR code utility\n//\n// import './PatientVaccinationOrdersPage.css';\n//\n// const PatientVaccinationOrdersPage = () => {\n//     const dispatch = useDispatch();\n//     const currentUser = useSelector(selectCurrentUser);\n//\n//     const orders = useSelector(selectPatientOrders);\n//     const fetchStatus = useSelector(selectFetchPatientOrdersStatus);\n//     const fetchError = useSelector(selectFetchPatientOrdersError);\n//\n//     const markPaidStatus = useSelector(selectMarkPaidStatus);\n//     const markPaidError = useSelector(selectMarkPaidError);\n//     const scheduleStatus = useSelector(selectScheduleAppointmentStatus);\n//     const scheduleError = useSelector(selectScheduleAppointmentError);\n//     const markVaccinatedStatus = useSelector(selectMarkVaccinatedStatus);\n//     const markVaccinatedError = useSelector(selectMarkVaccinatedError);\n//     const cancelStatus = useSelector(selectCancelOrderStatus);\n//     const cancelError = useSelector(selectCancelOrderError);\n//\n//     const [isModalOpen, setIsModalOpen] = useState(false);\n//     const [modalContent, setModalContent] = useState({ title: '', message: '' });\n//     const [selectedOrderIdForScheduling, setSelectedOrderIdForScheduling] = useState(null);\n//     const [appointmentDate, setAppointmentDate] = useState('');\n//     const [selectedOrderForPayment, setSelectedOrderForPayment] = useState(null); // State for payment order\n//     const [qrCodeDataUrl, setQrCodeDataUrl] = useState(''); // State to store QR code data URL\n//\n//     const patientId = currentUser?._id;\n//\n//     // Fetch orders on component mount\n//     useEffect(() => {\n//         if (patientId) {\n//             dispatch(fetchPatientVaccinationOrders());\n//         }\n//         return () => {\n//             dispatch(clearFetchPatientOrdersStatus());\n//             dispatch(clearMarkPaidStatus());\n//             dispatch(clearScheduleAppointmentStatus());\n//             dispatch(clearMarkVaccinatedStatus());\n//             dispatch(clearCancelOrderStatus());\n//         };\n//     }, [dispatch, patientId]);\n//\n//     // Handle success/failure of actions\n//     useEffect(() => {\n//         if (markPaidStatus === 'succeeded') {\n//             setModalContent({ title: 'Payment Confirmed!', message: 'Your payment has been successfully processed.' });\n//             setIsModalOpen(true);\n//             dispatch(clearMarkPaidStatus());\n//             dispatch(fetchPatientVaccinationOrders()); // Re-fetch orders\n//             setSelectedOrderForPayment(null); // Clear selected payment order\n//             setQrCodeDataUrl(''); // Clear QR code URL\n//         } else if (markPaidStatus === 'failed') {\n//             setModalContent({ title: 'Payment Failed', message: markPaidError || 'Failed to process payment.' });\n//             setIsModalOpen(true);\n//             dispatch(clearMarkPaidStatus());\n//             setSelectedOrderForPayment(null); // Clear selected payment order\n//             setQrCodeDataUrl(''); // Clear QR code URL\n//         }\n//\n//         if (scheduleStatus === 'succeeded') {\n//             setModalContent({ title: 'Appointment Scheduled!', message: 'Your vaccination appointment has been successfully scheduled.' });\n//             setIsModalOpen(true);\n//             setAppointmentDate('');\n//             setSelectedOrderIdForScheduling(null);\n//             dispatch(clearScheduleAppointmentStatus());\n//             dispatch(fetchPatientVaccinationOrders());\n//         } else if (scheduleStatus === 'failed') {\n//             setModalContent({ title: 'Scheduling Failed', message: scheduleError || 'Failed to schedule appointment.' });\n//             setIsModalOpen(true);\n//             dispatch(clearScheduleAppointmentStatus());\n//         }\n//\n//         if (markVaccinatedStatus === 'succeeded') {\n//             setModalContent({ title: 'Vaccination Confirmed!', message: 'Your vaccination has been successfully recorded.' });\n//             setIsModalOpen(true);\n//             dispatch(clearMarkVaccinatedStatus());\n//             dispatch(fetchPatientVaccinationOrders());\n//         } else if (markVaccinatedStatus === 'failed') {\n//             setModalContent({ title: 'Vaccination Confirmation Failed', message: markVaccinatedError || 'Failed to confirm vaccination.' });\n//             setIsModalOpen(true);\n//             dispatch(clearMarkVaccinatedStatus());\n//         }\n//\n//         if (cancelStatus === 'succeeded') {\n//             setModalContent({ title: 'Order Cancelled!', message: 'Your vaccination order has been successfully cancelled.' });\n//             setIsModalOpen(true);\n//             dispatch(clearCancelOrderStatus());\n//             dispatch(fetchPatientVaccinationOrders());\n//         } else if (cancelStatus === 'failed') {\n//             setModalContent({ title: 'Order Cancellation Failed', message: cancelError || 'Failed to cancel order.' });\n//             setIsModalOpen(true);\n//             dispatch(clearCancelOrderStatus());\n//         }\n//     }, [\n//         markPaidStatus, markPaidError, scheduleStatus, scheduleError,\n//         markVaccinatedStatus, markVaccinatedError, cancelStatus, cancelError,\n//         dispatch // Removed fetchPatientVaccinationOrders as it's not a direct dependency for this useEffect\n//     ]);\n//\n//     // Modified handlePay to open QR modal with loading state\n//     const handlePay = async (order) => {\n//         setSelectedOrderForPayment(order);\n//         setIsModalOpen(true); // Open modal first\n//\n//         // Set a loading message initially\n//         setModalContent({\n//             title: 'Scan to Pay',\n//             message: <div className=\"loading-qr\">Generating QR Code...</div>\n//         });\n//\n//         const qrContent = JSON.stringify({\n//             orderId: order._id,\n//             amount: order.charge_to_be_paid,\n//             vaccine: order.vaccineId?.name,\n//             hospital: order.hospitalId?.name\n//         });\n//\n//         try {\n//             const url = await generateQRCodeImage(qrContent, 200);\n//             setQrCodeDataUrl(url); // Store URL in state\n//             setModalContent({\n//                 title: 'Scan to Pay',\n//                 message: (\n//                     <div className=\"qr-payment-modal-content\">\n//                         <p>Please scan the QR code below to complete your payment of <strong>${order.charge_to_be_paid.toFixed(2)}</strong> for order #...{order._id.substring(order._id.length - 6)}.</p>\n//                         <img\n//                             src={url} // Use the directly generated URL here\n//                             alt=\"Payment QR Code\"\n//                             className=\"payment-qr-code\"\n//                         />\n//                         <p className=\"qr-instruction\">\n//                             (This is a simulated payment. After scanning, click \"Confirm Payment\".)\n//                         </p>\n//                     </div>\n//                 )\n//             });\n//         } catch (error) {\n//             console.error(\"Failed to generate QR code:\", error);\n//             setModalContent({\n//                 title: 'Error',\n//                 message: 'Failed to generate QR code. Please try again.'\n//             });\n//             setQrCodeDataUrl(''); // Clear on error\n//         }\n//     };\n//\n//     // Function to confirm payment after QR scan (simulated)\n//     const handleConfirmPayment = () => {\n//         if (selectedOrderForPayment) {\n//             if (window.confirm('Are you sure you want to confirm this payment?')) {\n//                 dispatch(markOrderAsPaid(selectedOrderForPayment._id));\n//                 // Modal will close automatically based on useEffect for markPaidStatus\n//             }\n//         }\n//     };\n//\n//     const handleScheduleAppointmentClick = (orderId) => {\n//         setSelectedOrderIdForScheduling(orderId);\n//         setAppointmentDate('');\n//         setIsModalOpen(true);\n//         setModalContent({\n//             title: 'Schedule Your Appointment',\n//             message: (\n//                 <>\n//                     <p>Please select a date for your vaccination appointment:</p>\n//                     <Input\n//                         label=\"Appointment Date\"\n//                         id=\"appointmentDate\"\n//                         type=\"date\"\n//                         value={appointmentDate}\n//                         onChange={(e) => setAppointmentDate(e.target.value)}\n//                         min={new Date().toISOString().split('T')[0]}\n//                         required\n//                     />\n//                 </>\n//             )\n//         });\n//     };\n//\n//     const handleConfirmSchedule = () => {\n//         if (!appointmentDate) {\n//             alert('Please select an appointment date.');\n//             return;\n//         }\n//         if (new Date(appointmentDate).getTime() < Date.now()) {\n//             alert('Appointment date cannot be in the past.');\n//             return;\n//         }\n//         dispatch(scheduleAppointment({ orderId: selectedOrderIdForScheduling, appointmentDate }));\n//         // Modal will close automatically based on useEffect for scheduleStatus\n//     };\n//\n//     const handleMarkVaccinated = (orderId) => {\n//         if (window.confirm('Are you sure you want to confirm this vaccination was received?')) {\n//             dispatch(markOrderAsVaccinated({ orderId, vaccinationDate: new Date().toISOString() }));\n//         }\n//     };\n//\n//     const handleCancelOrder = (orderId) => {\n//         if (window.confirm('Are you sure you want to cancel this vaccination order?')) {\n//             dispatch(cancelOrderByPatient(orderId));\n//         }\n//     };\n//\n//     const closeModal = () => {\n//         setIsModalOpen(false);\n//         setSelectedOrderIdForScheduling(null);\n//         setAppointmentDate('');\n//         setSelectedOrderForPayment(null); // Clear selected payment order\n//         setQrCodeDataUrl(''); // Clear QR code URL\n//     };\n//\n//     if (fetchStatus === 'loading') {\n//         return <div className=\"loading\">Loading your approved orders...</div>;\n//     }\n//\n//     if (fetchError) {\n//         return <div className=\"error-message\">Error fetching orders: {fetchError}</div>;\n//     }\n//\n//     if (!patientId) {\n//         return <div className=\"info-message\">Please log in as a patient to view your orders.</div>;\n//     }\n//\n//     return (\n//         <div className=\"patient-approved-orders-container\">\n//             <h2>My Approved Vaccination Orders</h2>\n//\n//             {orders.length === 0 ? (\n//                 <p>You have no approved vaccination orders at this time.</p>\n//             ) : (\n//                 <div className=\"orders-grid\">\n//                     {orders.map((order) => {\n//                         const isPaid = order.paymentStatus === 'paid';\n//                         const isScheduled = order.appointmentStatus === 'scheduled';\n//                         const isPendingScheduling = order.appointmentStatus === 'pending_scheduling';\n//                         const isVaccinated = order.vaccinationStatus === 'vaccinated';\n//                         const isCancelled = order.vaccinationStatus === 'cancelled';\n//                         const isPendingApproval = order.vaccinationStatus === 'pending_approval'; // New condition for pending approval\n//\n//                         const appointmentDateObj = order.appointment_date ? new Date(order.appointment_date) : null;\n//                         const isAppointmentInFuture = appointmentDateObj && appointmentDateObj.getTime() > Date.now();\n//                         const isAppointmentInPastOrToday = appointmentDateObj && appointmentDateObj.getTime() <= Date.now();\n//\n//                         return (\n//                             <div key={order._id} className={`order-card ${isCancelled ? 'card-cancelled' : ''} ${isVaccinated ? 'card-vaccinated' : ''}`}>\n//                                 <h3>Order #{order._id.substring(order._id.length - 6)}</h3>\n//                                 <p><strong>Hospital:</strong> {order.hospitalId?.name || 'N/A'}</p>\n//                                 <p><strong>Vaccine:</strong> {order.vaccineId?.name || 'N/A'} ({order.vaccineId?.type || 'N/A'})</p>\n//                                 <p><strong>Dose:</strong> {order.dose_number}</p>\n//                                 <p><strong>Charge:</strong> ${order.charge_to_be_paid.toFixed(2)}</p>\n//                                 <p><strong>Payment Status:</strong> <span className={`status-${order.paymentStatus}`}>{order.paymentStatus.replace('_', ' ')}</span></p>\n//                                 <p><strong>Appointment Status:</strong> <span className={`status-${order.appointmentStatus}`}>{order.appointmentStatus.replace('_', ' ')}</span></p>\n//                                 <p><strong>Vaccination Status:</strong> <span className={`status-${order.vaccinationStatus}`}>{order.vaccinationStatus.replace('_', ' ')}</span></p>\n//\n//                                 {order.appointment_date && (\n//                                     <p><strong>Appointment Date:</strong> {new Date(order.appointment_date).toLocaleDateString()} at {new Date(order.appointment_date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>\n//                                 )}\n//\n//                                 <div className=\"order-actions\">\n//                                     {!isPendingApproval && !isPaid && !isCancelled && !isVaccinated && (\n//                                         <Button\n//                                             onClick={() => handlePay(order)} // Pass the full order object\n//                                             disabled={markPaidStatus === 'loading'}\n//                                             variant=\"primary\"\n//                                         >\n//                                             {markPaidStatus === 'loading' ? 'Processing...' : 'Pay Now'}\n//                                         </Button>\n//                                     )}\n//\n//                                     {!isPendingApproval && isPaid && isPendingScheduling && !isCancelled && !isVaccinated && (\n//                                         <Button\n//                                             onClick={() => handleScheduleAppointmentClick(order._id)}\n//                                             disabled={scheduleStatus === 'loading'}\n//                                             variant=\"secondary\"\n//                                         >\n//                                             {scheduleStatus === 'loading' ? 'Scheduling...' : 'Schedule Appointment'}\n//                                         </Button>\n//                                     )}\n//\n//                                     {!isPendingApproval && isPaid && isScheduled && isAppointmentInFuture && !isCancelled && !isVaccinated && (\n//                                         <p className=\"appointment-info\">Appointment set for: {new Date(order.appointment_date).toLocaleDateString()}</p>\n//                                     )}\n//\n//                                     {!isPendingApproval && isPaid && isScheduled && isAppointmentInPastOrToday && !isCancelled && !isVaccinated && (\n//                                         <Button\n//                                             onClick={() => handleMarkVaccinated(order._id)}\n//                                             disabled={markVaccinatedStatus === 'loading'}\n//                                             variant=\"success\"\n//                                         >\n//                                             {markVaccinatedStatus === 'loading' ? 'Confirming...' : 'Mark Vaccinated'}\n//                                         </Button>\n//                                     )}\n//\n//                                     {!isPendingApproval && !isCancelled && !isVaccinated && (\n//                                         <Button\n//                                             onClick={() => handleCancelOrder(order._id)}\n//                                             disabled={cancelStatus === 'loading'}\n//                                             variant=\"danger\"\n//                                         >\n//                                             {cancelStatus === 'loading' ? 'Cancelling...' : 'Cancel Order'}\n//                                         </Button>\n//                                     )}\n//                                 </div>\n//                             </div>\n//                         );\n//                     })}\n//                 </div>\n//             )}\n//\n//             <Modal\n//                 isOpen={isModalOpen}\n//                 onClose={closeModal}\n//                 title={modalContent.title}\n//                 footer={\n//                     selectedOrderForPayment ? ( // If a payment order is selected, show confirm payment button\n//                         <Button onClick={handleConfirmPayment} disabled={markPaidStatus === 'loading'}>\n//                             {markPaidStatus === 'loading' ? 'Confirming...' : 'Confirm Payment'}\n//                         </Button>\n//                     ) : selectedOrderIdForScheduling ? ( // If scheduling an appointment\n//                         <Button onClick={handleConfirmSchedule} disabled={scheduleStatus === 'loading'}>\n//                             {scheduleStatus === 'loading' ? 'Confirm Schedule' : 'Confirm Schedule'}\n//                         </Button>\n//                     ) : ( // Default close button\n//                         <Button onClick={closeModal}>Close</Button>\n//                     )\n//                 }\n//             >\n//                 {modalContent.message}\n//             </Modal>\n//         </div>\n//     );\n// };\n//\n// export default PatientVaccinationOrdersPage;","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* src/pages/Patient/PatientVaccinationOrders/PatientVaccinationOrdersPage.css */\n\n.patient-approved-orders-container {\n    max-width: 1000px;\n    margin: 40px auto;\n    padding: 25px;\n    background-color: #f9f9f9;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    color: #333;\n}\n\n.patient-approved-orders-container h2 {\n    text-align: center;\n    color: #0056b3;\n    margin-bottom: 30px;\n    font-size: 2.2em;\n    border-bottom: 2px solid #e0e0e0;\n    padding-bottom: 15px;\n}\n\n.loading, .error-message, .info-message {\n    text-align: center;\n    padding: 15px;\n    margin-bottom: 20px;\n    border-radius: 8px;\n    font-size: 1.1em;\n}\n\n.loading {\n    background-color: #e0f7fa;\n    color: #007bb5;\n    border: 1px solid #b3e5fc;\n}\n\n.error-message {\n    background-color: #ffebee;\n    color: #d32f2f;\n    border: 1px solid #ef9a9a;\n}\n\n.info-message {\n    background-color: #fffde7;\n    color: #fbc02d;\n    border: 1px solid #fff59d;\n}\n\n.orders-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    gap: 25px;\n}\n\n.order-card {\n    background-color: #ffffff;\n    border: 1px solid #e0e0e0;\n    border-radius: 10px;\n    padding: 25px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.order-card:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);\n}\n\n.order-card h3 {\n    color: #007bff;\n    margin-top: 0;\n    margin-bottom: 15px;\n    font-size: 1.6em;\n    border-bottom: 1px dashed #e0e0e0;\n    padding-bottom: 10px;\n}\n\n.order-card p {\n    margin: 8px 0;\n    font-size: 0.98em;\n    line-height: 1.5;\n}\n\n.order-card p strong {\n    color: #555;\n    font-weight: 600;\n}\n\n/* Status styling */\n.status-pending_payment { color: #ff9800; font-weight: bold; } /* Orange */\n.status-paid { color: #4caf50; font-weight: bold; } /* Green */\n.status-refunded { color: #9e9e9e; font-weight: bold; } /* Grey */\n.status-cancelled { color: #f44336; font-weight: bold; } /* Red */\n.status-pending_scheduling { color: #2196f3; font-weight: bold; } /* Blue */\n.status-scheduled { color: #00bcd4; font-weight: bold; } /* Cyan */\n.status-pending_approval { color: #ffeb3b; font-weight: bold; } /* Yellow */\n.status-pending_vaccination { color: #673ab7; font-weight: bold; } /* Deep Purple */\n.status-vaccinated { color: #3f51b5; font-weight: bold; } /* Indigo */\n.status-not_vaccinated { color: #795548; font-weight: bold; } /* Brown */\n.status-missed { color: #ff5722; font-weight: bold; } /* Deep Orange */\n.status-completed { color: #8bc34a; font-weight: bold; } /* Light Green */\n\n\n.order-actions {\n    margin-top: 25px;\n    display: flex;\n    flex-wrap: wrap; /* Allow buttons to wrap */\n    gap: 10px;\n    justify-content: flex-start; /* Align buttons to the start */\n    padding-top: 15px;\n    border-top: 1px dashed #f0f0f0;\n}\n\n/* Button styles (assuming common Button component, but defining here for clarity) */\n.btn-primary, .btn-secondary, .btn-success, .btn-danger {\n    padding: 10px 18px;\n    border: none;\n    border-radius: 6px;\n    cursor: pointer;\n    font-size: 0.95em;\n    font-weight: 500;\n    transition: background-color 0.3s ease, transform 0.1s ease;\n    flex-grow: 1; /* Allow buttons to grow and fill space */\n    text-align: center;\n}\n\n.btn-primary { background-color: #007bff; color: white; }\n.btn-primary:hover:not(:disabled) { background-color: #0056b3; transform: translateY(-2px); }\n\n.btn-secondary { background-color: #6c757d; color: white; }\n.btn-secondary:hover:not(:disabled) { background-color: #5a6268; transform: translateY(-2px); }\n\n.btn-success { background-color: #28a745; color: white; }\n.btn-success:hover:not(:disabled) { background-color: #218838; transform: translateY(-2px); }\n\n.btn-danger { background-color: #dc3545; color: white; }\n.btn-danger:hover:not(:disabled) { background-color: #c82333; transform: translateY(-2px); }\n\n.btn-primary:disabled, .btn-secondary:disabled, .btn-success:disabled, .btn-danger:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n    transform: none;\n}\n\n.appointment-info {\n    font-style: italic;\n    color: #007bff;\n    margin-top: 10px;\n    font-weight: bold;\n}\n\n/* Styles for cancelled/vaccinated cards */\n.card-cancelled {\n    opacity: 0.7;\n    border-color: #f44336;\n    background-color: #ffebee;\n}\n.card-vaccinated {\n    opacity: 0.9;\n    border-color: #4caf50;\n    background-color: #e8f5e9;\n}\n\n/* Modal specific styles (assuming your Modal component takes care of basic layout) */\n/* If you need specific styles for the modal content within this page: */\n.modal-content-date-input {\n    margin-top: 20px;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/pages/Patient/PatientVaccinationOrders/PatientVaccinationOrdersPage.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/* src/pages/Patient/PatientVaccinationOrders/PatientVaccinationOrdersPage.css */\\n\\n.patient-approved-orders-container {\\n    max-width: 1000px;\\n    margin: 40px auto;\\n    padding: 25px;\\n    background-color: #f9f9f9;\\n    border-radius: 10px;\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n    color: #333;\\n}\\n\\n.patient-approved-orders-container h2 {\\n    text-align: center;\\n    color: #0056b3;\\n    margin-bottom: 30px;\\n    font-size: 2.2em;\\n    border-bottom: 2px solid #e0e0e0;\\n    padding-bottom: 15px;\\n}\\n\\n.loading, .error-message, .info-message {\\n    text-align: center;\\n    padding: 15px;\\n    margin-bottom: 20px;\\n    border-radius: 8px;\\n    font-size: 1.1em;\\n}\\n\\n.loading {\\n    background-color: #e0f7fa;\\n    color: #007bb5;\\n    border: 1px solid #b3e5fc;\\n}\\n\\n.error-message {\\n    background-color: #ffebee;\\n    color: #d32f2f;\\n    border: 1px solid #ef9a9a;\\n}\\n\\n.info-message {\\n    background-color: #fffde7;\\n    color: #fbc02d;\\n    border: 1px solid #fff59d;\\n}\\n\\n.orders-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\\n    gap: 25px;\\n}\\n\\n.order-card {\\n    background-color: #ffffff;\\n    border: 1px solid #e0e0e0;\\n    border-radius: 10px;\\n    padding: 25px;\\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-between;\\n}\\n\\n.order-card:hover {\\n    transform: translateY(-8px);\\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);\\n}\\n\\n.order-card h3 {\\n    color: #007bff;\\n    margin-top: 0;\\n    margin-bottom: 15px;\\n    font-size: 1.6em;\\n    border-bottom: 1px dashed #e0e0e0;\\n    padding-bottom: 10px;\\n}\\n\\n.order-card p {\\n    margin: 8px 0;\\n    font-size: 0.98em;\\n    line-height: 1.5;\\n}\\n\\n.order-card p strong {\\n    color: #555;\\n    font-weight: 600;\\n}\\n\\n/* Status styling */\\n.status-pending_payment { color: #ff9800; font-weight: bold; } /* Orange */\\n.status-paid { color: #4caf50; font-weight: bold; } /* Green */\\n.status-refunded { color: #9e9e9e; font-weight: bold; } /* Grey */\\n.status-cancelled { color: #f44336; font-weight: bold; } /* Red */\\n.status-pending_scheduling { color: #2196f3; font-weight: bold; } /* Blue */\\n.status-scheduled { color: #00bcd4; font-weight: bold; } /* Cyan */\\n.status-pending_approval { color: #ffeb3b; font-weight: bold; } /* Yellow */\\n.status-pending_vaccination { color: #673ab7; font-weight: bold; } /* Deep Purple */\\n.status-vaccinated { color: #3f51b5; font-weight: bold; } /* Indigo */\\n.status-not_vaccinated { color: #795548; font-weight: bold; } /* Brown */\\n.status-missed { color: #ff5722; font-weight: bold; } /* Deep Orange */\\n.status-completed { color: #8bc34a; font-weight: bold; } /* Light Green */\\n\\n\\n.order-actions {\\n    margin-top: 25px;\\n    display: flex;\\n    flex-wrap: wrap; /* Allow buttons to wrap */\\n    gap: 10px;\\n    justify-content: flex-start; /* Align buttons to the start */\\n    padding-top: 15px;\\n    border-top: 1px dashed #f0f0f0;\\n}\\n\\n/* Button styles (assuming common Button component, but defining here for clarity) */\\n.btn-primary, .btn-secondary, .btn-success, .btn-danger {\\n    padding: 10px 18px;\\n    border: none;\\n    border-radius: 6px;\\n    cursor: pointer;\\n    font-size: 0.95em;\\n    font-weight: 500;\\n    transition: background-color 0.3s ease, transform 0.1s ease;\\n    flex-grow: 1; /* Allow buttons to grow and fill space */\\n    text-align: center;\\n}\\n\\n.btn-primary { background-color: #007bff; color: white; }\\n.btn-primary:hover:not(:disabled) { background-color: #0056b3; transform: translateY(-2px); }\\n\\n.btn-secondary { background-color: #6c757d; color: white; }\\n.btn-secondary:hover:not(:disabled) { background-color: #5a6268; transform: translateY(-2px); }\\n\\n.btn-success { background-color: #28a745; color: white; }\\n.btn-success:hover:not(:disabled) { background-color: #218838; transform: translateY(-2px); }\\n\\n.btn-danger { background-color: #dc3545; color: white; }\\n.btn-danger:hover:not(:disabled) { background-color: #c82333; transform: translateY(-2px); }\\n\\n.btn-primary:disabled, .btn-secondary:disabled, .btn-success:disabled, .btn-danger:disabled {\\n    background-color: #cccccc;\\n    cursor: not-allowed;\\n    transform: none;\\n}\\n\\n.appointment-info {\\n    font-style: italic;\\n    color: #007bff;\\n    margin-top: 10px;\\n    font-weight: bold;\\n}\\n\\n/* Styles for cancelled/vaccinated cards */\\n.card-cancelled {\\n    opacity: 0.7;\\n    border-color: #f44336;\\n    background-color: #ffebee;\\n}\\n.card-vaccinated {\\n    opacity: 0.9;\\n    border-color: #4caf50;\\n    background-color: #e8f5e9;\\n}\\n\\n/* Modal specific styles (assuming your Modal component takes care of basic layout) */\\n/* If you need specific styles for the modal content within this page: */\\n.modal-content-date-input {\\n    margin-top: 20px;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// src/store/features/vaccinationOrder/vaccinationOrderSelectors.js\nimport { createSelector } from '@reduxjs/toolkit';\n\nconst selectVaccinationOrderState = (state) => state.vaccinationOrder;\n\nexport const selectCreateOrderStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.createStatus\n);\n\nexport const selectCreateOrderError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.createError\n);\n\nexport const selectPatientOrders = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.patientOrders\n);\n\nexport const selectFetchPatientOrdersStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.fetchPatientOrdersStatus\n);\n\nexport const selectFetchPatientOrdersError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.fetchPatientOrdersError\n);\n\n// NEW Selectors for action statuses\nexport const selectMarkVaccinatedStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.markVaccinatedStatus\n);\n\nexport const selectMarkVaccinatedError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.markVaccinatedError\n);\n\nexport const selectMarkPaidStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.markPaidStatus\n);\n\nexport const selectMarkPaidError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.markPaidError\n);\n\nexport const selectScheduleAppointmentStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.scheduleAppointmentStatus\n);\n\nexport const selectScheduleAppointmentError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.scheduleAppointmentError\n);\n\nexport const selectCancelOrderStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.cancelOrderStatus\n);\n\nexport const selectCancelOrderError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.cancelOrderError\n);\n\n// NEW Selectors for vaccinated persons by hospital\nexport const selectVaccinatedPersons = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.vaccinatedPersons\n);\n\nexport const selectFetchVaccinatedPersonsStatus = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.fetchVaccinatedPersonsStatus\n);\n\nexport const selectFetchVaccinatedPersonsError = createSelector(\n    selectVaccinationOrderState,\n    (orderState) => orderState.fetchVaccinatedPersonsError\n);\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","generateQRCodeImage","_ref","_callee","dataString","size","dataUrl","_t","_args","arguments","_context","undefined","QRCode","errorCorrectionLevel","width","margin","console","log","concat","error","apply","_next","_throw","_x","options","_slicedToArray","Array","isArray","_arrayWithHoles","next","push","_iterableToArrayLimit","_arrayLikeToArray","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","_nonIterableRest","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","dispatch","useDispatch","currentUser","useSelector","selectCurrentUser","orders","selectPatientOrders","fetchStatus","selectFetchPatientOrdersStatus","fetchError","selectFetchPatientOrdersError","markPaidStatus","selectMarkPaidStatus","markPaidError","selectMarkPaidError","scheduleStatus","selectScheduleAppointmentStatus","scheduleError","selectScheduleAppointmentError","markVaccinatedStatus","selectMarkVaccinatedStatus","markVaccinatedError","selectMarkVaccinatedError","cancelStatus","selectCancelOrderStatus","cancelError","selectCancelOrderError","_useState2","useState","isModalOpen","setIsModalOpen","_useState4","title","message","modalContent","setModalContent","_useState6","selectedOrderIdForScheduling","setSelectedOrderIdForScheduling","_useState8","appointmentDate","setAppointmentDate","_useState0","selectedOrderForPayment","setSelectedOrderForPayment","_useState10","setQrCodeDataUrl","patientId","_id","useEffect","fetchPatientVaccinationOrders","clearFetchPatientOrdersStatus","clearMarkPaidStatus","clearScheduleAppointmentStatus","clearMarkVaccinatedStatus","clearCancelOrderStatus","handlePay","order","paymentPageUrl","url","React","className","window","location","origin","charge_to_be_paid","toFixed","substring","src","alt","closeModal","map","_order$hospitalId","_order$vaccineId","_order$vaccineId2","isPaid","paymentStatus","isScheduled","appointmentStatus","isPendingScheduling","isVaccinated","vaccinationStatus","isCancelled","isPendingApproval","appointmentDateObj","appointment_date","Date","isAppointmentInFuture","getTime","now","isAppointmentInPastOrToday","key","hospitalId","vaccineId","type","dose_number","replace","toLocaleDateString","toLocaleTimeString","hour","minute","Button","onClick","disabled","variant","orderId","Input","label","id","onChange","target","min","toISOString","split","required","confirm","markOrderAsVaccinated","vaccinationDate","cancelOrderByPatient","Modal","isOpen","onClose","footer","markOrderAsPaid","alert","scheduleAppointment","___CSS_LOADER_EXPORT___","module","selectVaccinationOrderState","state","vaccinationOrder","selectCreateOrderStatus","createSelector","orderState","createStatus","selectCreateOrderError","createError","patientOrders","fetchPatientOrdersStatus","fetchPatientOrdersError","scheduleAppointmentStatus","scheduleAppointmentError","cancelOrderStatus","cancelOrderError","selectVaccinatedPersons","vaccinatedPersons","selectFetchVaccinatedPersonsStatus","fetchVaccinatedPersonsStatus","selectFetchVaccinatedPersonsError","fetchVaccinatedPersonsError"],"sourceRoot":""}