//Assessment #2 - NodeJS and ReactJs - 30th April

//NodeAPI
//1. Explain your knowledge of - statelessness, http, REST, spa and classical applications

Statelessness: the server does not retain any information about the client's session or previous requests between one request and the next.
HTTP (Hypertext Transfer Protocol): It's an application-layer protocol that defines how messages are formatted and transmitted between web browsers (clients) and web servers.
REST (Representational State Transfer): is an architectural style for designing networked applications. It's a set of principles and constraints that, when followed, can lead to scalable, maintainable, and robust web services.
SPA (Single Page Application):  is a web application that loads a single HTML page and dynamically updates the content within that page as the user interacts with the application.
Classical Applications: Classical or traditional web applications operate on a multi-page architecture

//2. Create an express setup, with a capability to expose end points for restful api
//3. Create an API with name CreateUser as get verb and pass user info such as name, session, address and age as query param
//4. Save the information passed in #3 to a json file name userInfo in local


//React

//5. create a webpack setup, index html and one css file to show css in next questions (can use app.css from our project)
//6. how react renders dom in conservative manner - explain, also explain

a. When your React component's state or props change, React doesn't immediately update the browser's DOM.
Instead, it creates a new virtual DOM tree.
b. Diffing: React then compares this new virtual DOM tree with the previous virtual DOM tree
c. React's algorithm identifies the differences between the two virtual DOM trees
d. Once React has determined the minimal set of changes, it updates only the specific parts of the actual DOM that have changed

//7. create a class component named - Success and show some quotes (messages) in it with h1,h2,h3 components
//8. create a functional component SuccessChild, make it child of Success and pass Name and Address to it from Success
//9. create SuccessStory as another component, pass this as props in SuccessChild from Success component
//10. explain how virtual dom works and how it is coupled with state updates and state update API's

The Virtual DOM (VDOM) is a lightweight JavaScript object that is an in-memory representation of the actual DOM.

VDOM works as follows:
1. When a React component is initially rendered, React creates a VDOM tree that represents the desired UI.
2. This VDOM tree is then used to update the real DOM, and the browser displays the web page.
3. When a component's state changes (e.g., through setState or a useState hook), React doesn't immediately update the real DOM.
4. Instead, React creates a new VDOM tree that reflects the updated state.
5. React then compares the new VDOM tree with the previous VDOM tree.
6. React uses an efficient algorithm to identify the minimal set of changes between the two trees.
7. Once React knows what has changed, it updates only the specific nodes in the real DOM that need to be changed.
8. The browser then re-renders the updated parts of the web page.


